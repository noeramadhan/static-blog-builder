const path = require('path')
const fs = require('fs')
const showdown = require('showdown')
const converter = new showdown.Converter({ metadata: true, ghCompatibleHeaderId: true, requireSpaceBeforeHeadingText: true, emoji: true })
const cherio = require('cheerio')
const minify = require('@node-minify/core')
const htmlMinifier = require('@node-minify/html-minifier')
const minifyOptions = {
    collapseBooleanAttributes: true,
    collapseInlineTagWhitespace: true,
    collapseWhitespace: true,
    conservativeCollapse: true,
    decodeEntities: true,
    includeAutoGeneratedTags: false,
    minifyCSS: true,
    minifyJS: true,
    minifyURLs: true,
    preventAttributesEscaping: true,
    processConditionalComments: true,
    removeAttributeQuotes: false,
    removeComments: true,
    removeEmptyAttributes: true,
    removeOptionalTags: false,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    sortAttributes: true,
    sortClassName: true,
    trimCustomFragments: true,
    useShortDoctype: true,
    keepClosingSlash: true
}

const buildDir = 'build'
const buildPostDir = 'posts'

const minifier = (content, options, paths, name) => {
    minify({
        compressor: htmlMinifier,
        content: content,
        options: options
    }).then(data => {
        fs.writeFile(paths, data, (err) => {
            if (err) return console.log(err)
            console.log(name, 'created at', paths)
        })
    })
}

const reader = (filename) => fs.readFileSync(path.join(__dirname, filename), 'utf8', (err, file) => file)
const cherioLoad = (filename) => cherio.load(reader(filename), { decodeEntities: false, xmlMode: true })

const buildMe = (data, curpath, name, title) => {
    const $ = cherioLoad('partials/index.html.partial')

    $('.app').html(data)
    $('title').text(title)

    minifier($.html(), minifyOptions, path.join(__dirname, '..', buildDir, curpath), name)
}

const builderPost = (data) => {
    const $ = cherioLoad('partials/article.html.partial')

    $('.header .title').text(data.title)
    $('.meta').text(data.date)
    $('.content').html(data.content)

    buildMe($.html(), `${buildPostDir}\\${data.slug}.html`, data.slug, data.title)

}

const builderIndex = (data) => {
    const $ = cherioLoad('partials/list.html.partial')

    const itemSRC = $('.item').parent().html()
    $('.item').remove()

    data.slice().sort(
        (a, b) => new Date(b.date) - new Date(a.date)
    ).forEach((item) => {
        let itemHTML = cherio.load(itemSRC, { xmlMode: true })
        itemHTML('.meta').text(item.date)
        itemHTML('.title .link').text(item.title)
        itemHTML('.title .link').attr('href', '/posts/' + item.slug + '.html')
        $('.list').append(itemHTML.html())
    })

    buildMe($.html(), 'index.html', 'index', '.')

}

const builder = () => {

    const directory = path.join(__dirname, '..', buildDir)

    fs.readdirSync(directory).forEach(f => fs.rmSync(`${directory}/${f}`, { recursive: true }));

    fs.readdir(path.join(__dirname, 'posts'), (err, files) => {


        let buildPost = path.join(__dirname, '..', buildDir, buildPostDir)
        if (!fs.existsSync(buildPost)) fs.mkdirSync(buildPost)

        const listData = files.filter(item => path.extname(item).toLowerCase() == '.md').map((slug) => {
            let html = converter.makeHtml(reader('posts' + '\\' + slug))
            const { title, date, show } = converter.getMetadata()

            if (show === 'true') {
                let helper = date.split('/')
                let dateFormat = new Date(helper[2], helper[1] - 1, helper[0]).toLocaleDateString("EN-US", {
                    year: "numeric",
                    month: "short",
                    day: "2-digit",
                })

                builderPost({
                    date: dateFormat,
                    title: title,
                    slug: slug.split('.')[0],
                    content: html
                })

                return {
                    date: dateFormat,
                    title: title,
                    slug: slug.split('.')[0]
                }
            }

            return {}
        })

        builderIndex(listData)
    })

    fs.readdir(path.join(__dirname), (err, files) => {
        files.filter(item => path.extname(item).toLowerCase() === '.html').map(item => {

            const $ = cherioLoad(item)
            const name = item.split('.')[0]

            $('title').text(name)

            minifier($.html(), minifyOptions, path.join(__dirname, '..', buildDir, item), name)
        })
    })
}

builder()
console.log('done')